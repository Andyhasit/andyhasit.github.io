const c=console;class NodeWrapper{constructor(t){this.el=document.createElement(t)}atts(t){for(let e in t)this.el.setAttribute(e,t[e]);return this}class(t){return this.el.className=t,this}clear(){return this.el.innerHTML="",this}on(t){for(let e in t)this.el.addEventListener(e,t[e]);return this}id(t){return this.el.id=t,this}inner(t){this.el.innerHTML="",Array.isArray(t)||(t=[t]);let e=document.createDocumentFragment();return t.forEach(t=>{t instanceof NodeWrapper||t instanceof View?e.appendChild(t.el):t instanceof Node?e.appendChild(t):e.appendChild(document.createTextNode(t.toString()))}),this.el.appendChild(e),this}html(t){return this.el.innerHTML=t,this}text(t){return this.el.textContent=t,this}}const h=function(t){return new NodeWrapper(t)};class View{constructor(t,e,i){this._app=t,this._vCache={},this._matchers={},this._prevState={},this.v=this._getView.bind(this),this.draw(h,this.v,t,e,i)}setRoot(t){if(!(t instanceof NodeWrapper||t instanceof View))throw new TypeError("View.setRoot() only accepts types: NodeWrapper, View");this.root=t,this.el=t.el}match(t,e){this._matchers.hasOwnProperty(t)||(this._matchers[t]=[]),this._matchers[t].push(e)}update(t,e,i,s,r){for(let t in this._matchers){let e=s[t];if(this._prevState[t]!==e){this._matchers[t].forEach(t=>{t(e)})}this._prevState[t]=e}}_getView(t,e,i){if(void 0==i)return new t(this._app,e);let s=t.name;this._vCache.hasOwnProperty(s)||(this._vCache[s]={});let r=this._vCache[s];if(r.hasOwnProperty(i)){let t=r[i];return t.update(h,this.v,this._app,e,i),t}{let s=new t(this._app,e,i);return s.update(h,this.v,this._app,e,i),r[i]=s,s}}}class App{constructor(){this._register={}}_getWatchList(t){let e=this._register[t];return void 0==e&&(e=[],this._register[t]=e),e}emit(t,e){this._getWatchList(t).forEach(t=>t(e))}on(t,e){this._getWatchList(t).push(e)}}const pillbug={};pillbug.App=App,pillbug.View=View,pillbug.NodeWrapper=NodeWrapper,pillbug.version="0.0.1",module.exports=pillbug;